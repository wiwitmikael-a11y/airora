// Defines the different views the application can be in.
export enum ViewType {
  NONE = 'none',
  CHAT = 'chat',
  IMAGE = 'image',
  VIDEO = 'video',
  VISIONARY = 'visionary',
  POETIC = 'poetic',
  CODE = 'code',
  RESEARCHER = 'researcher',
  LIVE = 'live',
}

// Defines the role of a message sender.
export enum MessageRole {
  USER = 'user',
  AI = 'ai',
}

// Represents a single chat message.
export interface ChatMessage {
  id: string;
  role: MessageRole;
  content: string;
  isLoading?: boolean;
  uploadedImage?: {
    url: string; // data URL for preview
    mimeType: string;
  };
}

// Represents an image generated by the AI.
export interface GeneratedImage {
    id: string;
    prompt: string;
    imageUrl?: string;
    status: 'processing' | 'completed' | 'failed';
}

// Represents a video generated by the AI.
export interface GeneratedVideo {
  id: string;
  prompt: string;
  videoUrl?: string;
  operationName: string;
  status: 'processing' | 'completed' | 'failed';
  uploadedImage?: {
    url: string; 
  };
}

// Represents the data needed for the image editing modal.
export interface ImageForEditing {
    id: string;
    prompt: string;
    imageUrl: string;
    base64: string;
    mimeType: string;
}

// Represents a single transcription line in Live View.
export interface TranscriptionLine {
  id: string;
  role: MessageRole;
  text: string;
  summary?: string;
  isSummarizing?: boolean;
}

// FIX: Define AIStudio interface and augment Window globally in one place
// to resolve TypeScript errors about subsequent property declarations.
// Represents the aistudio object available on the window for API key selection.
declare global {
  interface AIStudio {
    hasSelectedApiKey: () => Promise<boolean>;
    openSelectKey: () => Promise<void>;
  }
  interface Window {
    aistudio?: AIStudio;
  }
}
